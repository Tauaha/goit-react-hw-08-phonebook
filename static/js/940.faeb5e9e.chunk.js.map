{"version":3,"file":"static/js/940.faeb5e9e.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactsForm/ContactsForm.module.css?d5f2","redux/selectors.js","components/ContactsForm/ContactsForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","components/Loader/Loader.jsx","components/Filter/Filter.jsx","Pages/Contacts.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactsForm_form__1Y65-\",\"input\":\"ContactsForm_input__UjXFK\",\"button\":\"ContactsForm_button__zuUB3\",\"title\":\"ContactsForm_title__cd5Wh\"};","import { createSelector } from \"@reduxjs/toolkit\"\n\nexport const selectContacts =(state) => state.contacts.contacts\n\n\nexport const selectorIsLoading = state => state.contacts.isLoading;\n\nexport const selectorError = state => state.contacts.error;\n\nexport const selectFilter = (state) => state.filter\n\nexport const selectVisibleContacts = createSelector(\n    [ selectContacts, selectFilter],\n    (contacts, filter) => {\n     return contacts.filter((contact) => \n     contact.name.toLowerCase()\n            .includes(filter.toLowerCase()))\n            \n    }\n  )","import {  useState, React } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from 'components/ContactsForm/ContactsForm.module.css'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Input } from '@chakra-ui/react'\nimport { Button} from '@chakra-ui/react'\nimport { nanoid } from '@reduxjs/toolkit';\nimport { selectContacts } from 'redux/selectors';\nimport { addContact } from 'redux/contactsApi';\n\n\n\n\n\nfunction ContactsForm () {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts)\n  const [contactName, setContactName] = useState('');\n  const [contactNumber, setContactNumber] =useState('');\n   \n \n const handleInputNameChange=(e)=>{\n    const { name, value } = e.target;\n    switch(name){\n      case 'name':\n        setContactName(value)\n        break;\n        case 'number':\n          setContactNumber(value)\n          break; \n        default: return\n         }\n  };\n  const handleOnSubmit=(e)=>{\n    e.preventDefault();\n    const newContact = {\n      id: nanoid(),\n      name: contactName,\n      number: contactNumber\n    };\n   const chekContact = contacts.some(item => item.name === contactName)\n   if (chekContact) {\n     return (\n       alert(`${contactName} is already in contacts.`)\n     );\n   }\n   dispatch(addContact(newContact));\n    cleanInput();\n  }\n\n  const cleanInput=()=> {\n    return(\n      setContactName(''),\n      setContactNumber('')\n    )\n     \n    \n  }\n     return(\n        <form onSubmit={handleOnSubmit} className={styles.form}>\n      <label>Name</label>\n      <Input\n        type=\"text\" name=\"name\"\n        className={styles.input} \n    color='#276749'\n    width='auto'\n    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    required\n    value={contactName}\n    onChange={handleInputNameChange}\n    placeholder='Enter your name'\n    _placeholder={{ color: 'inherit' }}\n  />\n    <label>Number</label>\n    <Input\n        type=\"tel\"\n        name=\"number\"\n        className={styles.input} \n    color='#276749'\n    width='auto'\n    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n    required\n    value={contactNumber}\n        onChange={handleInputNameChange}\n    placeholder='Enter your number'\n    _placeholder={{ color: 'inherit' }}\n  />\n  <Button   border='2px'\n  borderColor='#276749'   color='#276749' variant='outline' className={styles.button} type=\"submit\">Add contacts\n  </Button>\n      </form>\n  )\n       }\n\nContactsForm.propTypes ={\n   onSubmit: PropTypes.func.isRequired\n\n}        \n\nexport default ContactsForm\n\n\n\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"ContactList_button__7kL4l\",\"item\":\"ContactList_item__EZYHO\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from 'components/ContactList/ContactList.module.css'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/selectors';\nimport { deleteContact} from 'redux/contactsApi';\n\nimport { Button} from '@chakra-ui/react'\n\nconst ContactList =()=>{\nconst dispatch = useDispatch()\nconst visibleContact = useSelector(selectVisibleContacts);\n  \nreturn(\n    <>\n    {visibleContact.length > 0 &&\n       (\n         <ul className={styles.list}>\n        {visibleContact.map(({id, name, phone}) => (<li key={id} className={styles.item}>\n       {name}:<span>{phone}</span> \n       <Button   border='2px'\n  borderColor='#276749'   color='#276749' variant='outline'  type=\"submit\"onClick={()=> dispatch(deleteContact(id))} className={styles.button}>Delete\n  </Button>\n        </li> )) }\n    </ul>\n )} \n    \n    </>\n  \n)\n}\n\nContactList.propTypes ={\n     visibleContact: PropTypes.arrayOf(PropTypes.object),\n    onDelete: PropTypes.func.isRequired,\n}\nexport default ContactList\n\n\n","import { RotatingLines } from  'react-loader-spinner'\n\n\nconst Loader =()=>{\nreturn(<RotatingLines\n  strokeColor=\"grey\"\n  strokeWidth=\"5\"\n  animationDuration=\"0.75\"\n  width=\"96\"\n  visible={true}\n/>)\n}\n\nexport default Loader","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/selectors';\nimport { setFilter } from 'redux/filterSlice';\nimport { Input } from '@chakra-ui/react'\nimport styles from '../ContactsForm/ContactsForm.module.css'\nconst ContactFilter =()=> {\n   const {filter} = useSelector(selectFilter)\n    const dispatch = useDispatch()\n      const changeFilter = e => {\n    dispatch(setFilter(e.target.value))\n  };\nreturn(\n    <>\n    \n    <Input\n     type=\"text\" value={filter}  onChange={changeFilter}\n        className={styles.input} \n    color='#276749'\n    width='auto'\n    placeholder='Filter'\n    _placeholder={{ color: 'inherit' }}\n  />\n    <input type=\"text\" value={filter}  onChange={changeFilter} />\n\n    </>\n)\n}\n\nContactFilter.propTypes = {\n value: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number,  ]),\n onChange: PropTypes.func.isRequired    \n       \n}\nexport default ContactFilter","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\n\n\nimport ContactsForm from 'components/ContactsForm/ContactsForm';\nimport { selectorIsLoading } from 'redux/selectors';\nimport ContactList from 'components/ContactList/ContactList';\nimport Loader from 'components/Loader/Loader';\nimport { contactsApi } from 'redux/contactsApi';\nimport ContactFilter from 'components/Filter/Filter';\nimport { Outlet } from 'react-router-dom';\nimport styles from '../components/ContactsForm/ContactsForm.module.css'\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectorIsLoading);\n\n  useEffect(() => {\n    dispatch(contactsApi());\n  }, [dispatch]);\n\n  return (\n    <>\n     \n     <h1 className={styles.title}>Phonebook</h1>\n      <ContactsForm />\n      <h2 className={styles.title}>Find contacts by name</h2>\n      <ContactFilter />\n      {isLoading && <Loader/>}\n      <h2 className={styles.title}>Contacts</h2>\n      <ContactList/>\n      <Outlet/>\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","selectorIsLoading","isLoading","selectFilter","filter","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","dispatch","useDispatch","useSelector","useState","contactName","setContactName","contactNumber","setContactNumber","handleInputNameChange","e","target","value","cleanInput","onSubmit","preventDefault","newContact","id","nanoid","number","some","item","alert","addContact","className","styles","I","type","color","width","pattern","title","required","onChange","placeholder","_placeholder","border","borderColor","variant","visibleContact","length","map","phone","onClick","deleteContact","strokeColor","strokeWidth","animationDuration","visible","changeFilter","setFilter","Contacts","useEffect","contactsApi"],"sourceRoot":""}